<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Go by Example: Channel: Merge</title>
    <link rel=stylesheet href="site.css">
  </head>
  <script>
      onkeydown = (e) => {
          
          if (e.key == "ArrowLeft") {
              window.location.href = 'methods.html';
          }
          
          
          if (e.key == "ArrowRight") {
              window.location.href = 'encoding-json.html';
          }
          
      }
  </script>
  <body>
    <div class="example" id="channel-merge">
      <h2><a href="./">Go by Example</a>: Channel: Merge</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>Ref: <a href="https://medium.com/justforfunc/why-are-there-nil-channels-in-go-9877cc0b2308">Why are there nil channels in Go?</a>
Ref: <a href="https://youtu.be/ynoY2xz-F8s">GopherCon 2016: Francesc Campoy - Understanding nil</a></p>

          </td>
          <td class="code empty leading">
            
          
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            <a href="https://go.dev/play/p/XOMGz3thc6K"><img title="Run code" src="play.png" class="run" /></a><img title="Copy code" src="clipboard.png" class="copy" />
          <pre class="chroma"><span class="kn">package</span> <span class="nx">main</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>This function creates a channel,  <br/>
starts a new go routine that sends values to the created channel,  <br/>
and finally returns the channel.</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma">
<span class="kd">func</span> <span class="nf">buildChan</span><span class="p">(</span><span class="nx">count</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">val</span> <span class="kt">int</span><span class="p">)</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="nx">c</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span>
    <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">count</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
            <span class="nx">c</span> <span class="o">&lt;-</span> <span class="nx">val</span>
        <span class="p">}</span>
        <span class="nb">close</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
    <span class="p">}()</span>
    <span class="k">return</span> <span class="nx">c</span>
<span class="p">}</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>1st implementation. <br/>
output: 2 2 1 2 2 2 0 0 0 0 1 0 0 0 0 1 1 0  0 0 0 1 0 0 0 0 0 0 (printing zeros forever)  <br/>
because we are reading value from closed channel</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma">
<span class="kd">func</span> <span class="nf">merge_wrong1</span><span class="p">(</span><span class="nx">out</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">{</span>
            <span class="k">select</span> <span class="p">{</span>
            <span class="k">case</span> <span class="nx">v</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">a</span><span class="p">:</span>
                <span class="nx">out</span> <span class="o">&lt;-</span> <span class="nx">v</span>
            <span class="k">case</span> <span class="nx">v</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">b</span><span class="p">:</span>
                <span class="nx">out</span> <span class="o">&lt;-</span> <span class="nx">v</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}()</span>
<span class="p">}</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>merge channels 2nd implementation  <br/>
output: 1 1 1 2 2 1 2 1 2 0 2 0 fatal error: all goroutines are asleep - deadlock!  <br/>
because we for got to <code>close(out)</code></p>

          </td>
          <td class="code leading">
            
          <pre class="chroma">
<span class="kd">func</span> <span class="nf">merge_wrong2</span><span class="p">(</span><span class="nx">out</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma">    <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">adone</span><span class="p">,</span> <span class="nx">bdone</span> <span class="o">:=</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">false</span>
        <span class="k">for</span> <span class="p">!</span><span class="nx">adone</span> <span class="o">||</span> <span class="p">!</span><span class="nx">bdone</span> <span class="p">{</span>
            <span class="k">select</span> <span class="p">{</span>
            <span class="k">case</span> <span class="nx">v</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">a</span><span class="p">:</span>
                <span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
                    <span class="nx">adone</span> <span class="p">=</span> <span class="kc">true</span>
                    <span class="k">continue</span>
                <span class="p">}</span>
                <span class="nx">out</span> <span class="o">&lt;-</span> <span class="nx">v</span>
            <span class="k">case</span> <span class="nx">v</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">b</span><span class="p">:</span>
                <span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
                    <span class="nx">bdone</span> <span class="p">=</span> <span class="kc">true</span>
                    <span class="k">continue</span>
                <span class="p">}</span>
                <span class="nx">out</span> <span class="o">&lt;-</span> <span class="nx">v</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}()</span>
<span class="p">}</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>the working case, but bad performance.  <br/>
infinite loop is reading from case even the channel is closed. <br/>
it will keep printing &ldquo;a is now closed&rdquo; after a is adone</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma">
<span class="kd">func</span> <span class="nf">merge_fixed_1</span><span class="p">(</span><span class="nx">out</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">out</span><span class="p">)</span> <span class="c1">// add this
</span><span class="c1"></span>        <span class="nx">adone</span><span class="p">,</span> <span class="nx">bdone</span> <span class="o">:=</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">false</span>
        <span class="k">for</span> <span class="p">!</span><span class="nx">adone</span> <span class="o">||</span> <span class="p">!</span><span class="nx">bdone</span> <span class="p">{</span>
            <span class="k">select</span> <span class="p">{</span>
            <span class="k">case</span> <span class="nx">v</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">a</span><span class="p">:</span>
                <span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
                    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;a is now closed&#34;</span><span class="p">)</span>
                    <span class="nx">adone</span> <span class="p">=</span> <span class="kc">true</span>
                    <span class="k">continue</span>
                <span class="p">}</span>
                <span class="nx">out</span> <span class="o">&lt;-</span> <span class="nx">v</span>
            <span class="k">case</span> <span class="nx">v</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">b</span><span class="p">:</span>
                <span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
                    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;b is now closed&#34;</span><span class="p">)</span>
                    <span class="nx">bdone</span> <span class="p">=</span> <span class="kc">true</span>
                    <span class="k">continue</span>
                <span class="p">}</span>
                <span class="nx">out</span> <span class="o">&lt;-</span> <span class="nx">v</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}()</span>
<span class="p">}</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>the working case.  <br/>
use nil channel to disable select cases</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma">
<span class="kd">func</span> <span class="nf">merge_fixed_2</span><span class="p">(</span><span class="nx">out</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">out</span><span class="p">)</span>
        <span class="nx">adone</span><span class="p">,</span> <span class="nx">bdone</span> <span class="o">:=</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">false</span>
        <span class="k">for</span> <span class="p">!</span><span class="nx">adone</span> <span class="o">||</span> <span class="p">!</span><span class="nx">bdone</span> <span class="p">{</span>
            <span class="k">select</span> <span class="p">{</span>
            <span class="k">case</span> <span class="nx">v</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">a</span><span class="p">:</span>
                <span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
                    <span class="nx">adone</span> <span class="p">=</span> <span class="kc">true</span>
                    <span class="nx">a</span> <span class="p">=</span> <span class="kc">nil</span> <span class="c1">// add this
</span><span class="c1"></span>                    <span class="k">continue</span>
                <span class="p">}</span>
                <span class="nx">out</span> <span class="o">&lt;-</span> <span class="nx">v</span>
            <span class="k">case</span> <span class="nx">v</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">b</span><span class="p">:</span>
                <span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
                    <span class="nx">bdone</span> <span class="p">=</span> <span class="kc">true</span>
                    <span class="nx">b</span> <span class="p">=</span> <span class="kc">nil</span> <span class="c1">// add this
</span><span class="c1"></span>                    <span class="k">continue</span>
                <span class="p">}</span>
                <span class="nx">out</span> <span class="o">&lt;-</span> <span class="nx">v</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}()</span>
<span class="p">}</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">ca</span><span class="p">,</span> <span class="nx">cb</span> <span class="o">:=</span> <span class="nf">buildChan</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="nf">buildChan</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
    <span class="nx">out</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span>
    <span class="c1">//// merge_wrong1(out, ca, cb)
</span><span class="c1"></span>    <span class="c1">//// merge_wrong2(out, ca, cb)
</span><span class="c1"></span>    <span class="c1">//// merge_fixed_1(out, ca, cb)
</span><span class="c1"></span>    <span class="nf">merge_fixed_2</span><span class="p">(</span><span class="nx">out</span><span class="p">,</span> <span class="nx">ca</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma">    <span class="k">for</span> <span class="nx">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">out</span> <span class="p">{</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%v &#34;</span><span class="p">,</span> <span class="nx">v</span><span class="p">)</span>
    <span class="p">}</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code">
            
          <pre class="chroma"><span class="p">}</span>
</pre>
          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma"><span class="gp">$</span> go run channel-merge.go</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code">
            
          <pre class="chroma"><span class="go">2 2 1 2 2 1 2 1 1 1</span></pre>
          </td>
        </tr>
        
      </table>
      
      
      <p class="next">
        Next example: <a href="encoding-json.html">encoding/json</a>.
      </p>
      

    <p class="footer">
      <a href="https://github.com/hhow09/gobyexample">source</a>
      <br/>
      Forked from <a href="https://gobyexample.com">Go by Example</a>
    </p>

    </div>
    <script>
      var codeLines = [];
      codeLines.push('');codeLines.push('package main\u000A');codeLines.push('import \"fmt\"\u000A');codeLines.push('func buildChan(count int, val int) \u003C-chan int {\u000A    c :\u003D make(chan int)\u000A    go func() {\u000A        for i :\u003D 0; i \u003C count; i++ {\u000A            c \u003C- val\u000A        }\u000A        close(c)\u000A    }()\u000A    return c\u000A}\u000A');codeLines.push('func merge_wrong1(out chan\u003C- int, a, b \u003C-chan int) {\u000A    go func() {\u000A        for {\u000A            select {\u000A            case v :\u003D \u003C-a:\u000A                out \u003C- v\u000A            case v :\u003D \u003C-b:\u000A                out \u003C- v\u000A            }\u000A        }\u000A    }()\u000A}\u000A');codeLines.push('func merge_wrong2(out chan\u003C- int, a, b \u003C-chan int) {\u000A');codeLines.push('    go func() {\u000A        adone, bdone :\u003D false, false\u000A        for !adone || !bdone {\u000A            select {\u000A            case v, ok :\u003D \u003C-a:\u000A                if !ok {\u000A                    adone \u003D true\u000A                    continue\u000A                }\u000A                out \u003C- v\u000A            case v, ok :\u003D \u003C-b:\u000A                if !ok {\u000A                    bdone \u003D true\u000A                    continue\u000A                }\u000A                out \u003C- v\u000A            }\u000A        }\u000A    }()\u000A}\u000A');codeLines.push('func merge_fixed_1(out chan\u003C- int, a, b \u003C-chan int) {\u000A    go func() {\u000A        defer close(out) // add this\u000A        adone, bdone :\u003D false, false\u000A        for !adone || !bdone {\u000A            select {\u000A            case v, ok :\u003D \u003C-a:\u000A                if !ok {\u000A                    fmt.Println(\"a is now closed\")\u000A                    adone \u003D true\u000A                    continue\u000A                }\u000A                out \u003C- v\u000A            case v, ok :\u003D \u003C-b:\u000A                if !ok {\u000A                    fmt.Println(\"b is now closed\")\u000A                    bdone \u003D true\u000A                    continue\u000A                }\u000A                out \u003C- v\u000A            }\u000A        }\u000A    }()\u000A}\u000A');codeLines.push('func merge_fixed_2(out chan\u003C- int, a, b \u003C-chan int) {\u000A    go func() {\u000A        defer close(out)\u000A        adone, bdone :\u003D false, false\u000A        for !adone || !bdone {\u000A            select {\u000A            case v, ok :\u003D \u003C-a:\u000A                if !ok {\u000A                    adone \u003D true\u000A                    a \u003D nil // add this\u000A                    continue\u000A                }\u000A                out \u003C- v\u000A            case v, ok :\u003D \u003C-b:\u000A                if !ok {\u000A                    bdone \u003D true\u000A                    b \u003D nil // add this\u000A                    continue\u000A                }\u000A                out \u003C- v\u000A            }\u000A        }\u000A    }()\u000A}\u000A');codeLines.push('func main() {\u000A    ca, cb :\u003D buildChan(5, 1), buildChan(5, 2)\u000A    out :\u003D make(chan int)\u000A    //// merge_wrong1(out, ca, cb)\u000A    //// merge_wrong2(out, ca, cb)\u000A    //// merge_fixed_1(out, ca, cb)\u000A    merge_fixed_2(out, ca, cb)\u000A');codeLines.push('    for v :\u003D range out {\u000A        fmt.Printf(\"%v \", v)\u000A    }\u000A');codeLines.push('}\u000A');codeLines.push('');codeLines.push('');
    </script>
    <script src="site.js" async></script>
  </body>
</html>
