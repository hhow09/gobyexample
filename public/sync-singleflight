<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Go by Example: sync.singleflight</title>
    <link rel=stylesheet href="site.css">
  </head>
  <script>
      onkeydown = (e) => {
          
          if (e.key == "ArrowLeft") {
              window.location.href = 'rwmutex.html';
          }
          
          
          if (e.key == "ArrowRight") {
              window.location.href = 'pattern-singleton.html';
          }
          
      }
  </script>
  <body>
    <div class="example" id="sync-singleflight">
      <h2><a href="./">Go by Example</a>: sync.singleflight</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            <p><a href="https://pkg.go.dev/golang.org/x/sync/singleflight">singleflight</a> provides a duplicate function call suppression mechanism.
you create a key to identify the request. when there&rsquo;re other requests
with the same key, it will wait for the answer which is processing for
another request.</p>

          </td>
          <td class="code empty leading">
            
          
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            <a href="https://go.dev/play/p/fAwC3i22ggL"><img title="Run code" src="play.png" class="run" /></a><img title="Copy code" src="clipboard.png" class="copy" />
          <pre class="chroma"><span class="kn">package</span> <span class="nx">main</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma"><span class="kn">import</span> <span class="p">(</span>
    <span class="s">&#34;errors&#34;</span>
    <span class="s">&#34;fmt&#34;</span>
    <span class="s">&#34;log&#34;</span>
    <span class="s">&#34;strconv&#34;</span>
    <span class="s">&#34;sync&#34;</span>
    <span class="s">&#34;time&#34;</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma">    <span class="s">&#34;golang.org/x/sync/singleflight&#34;</span>
<span class="p">)</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma"><span class="kd">var</span> <span class="p">(</span>
    <span class="nx">g</span>            <span class="nx">singleflight</span><span class="p">.</span><span class="nx">Group</span>
    <span class="nx">ErrCacheMiss</span> <span class="p">=</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;cache miss&#34;</span><span class="p">)</span>
<span class="p">)</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>simulating 10 concurrent request</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">wg</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;===default query===&#34;</span><span class="p">)</span>
    <span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma">    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">defer</span> <span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
            <span class="nx">data</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">loadDefault</span><span class="p">(</span><span class="s">&#34;key&#34;</span><span class="p">)</span>
            <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
                <span class="nx">log</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
                <span class="k">return</span>
            <span class="p">}</span>
            <span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
        <span class="p">}()</span>
    <span class="p">}</span>
    <span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>simulating 10 concurrent request</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">)</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;===wrap query with singleflight===&#34;</span><span class="p">)</span>
    <span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma">    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">defer</span> <span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
            <span class="nx">data</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">loadWithSingleflight</span><span class="p">(</span><span class="s">&#34;key&#34;</span><span class="p">)</span>
            <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
                <span class="nx">log</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
                <span class="k">return</span>
            <span class="p">}</span>
            <span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
        <span class="p">}()</span>
    <span class="p">}</span>
    <span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
<span class="p">}</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma"><span class="kd">func</span> <span class="nf">loadDefault</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">data</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">loadFromCache</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">ErrCacheMiss</span> <span class="p">{</span>
        <span class="nx">data</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">loadFromDB</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span>
        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
            <span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
            <span class="k">return</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">err</span>
        <span class="p">}</span>
        <span class="nf">setCache</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">data</span><span class="p">,</span> <span class="kc">nil</span>
<span class="p">}</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>load from cache, if missed, load from db and set cache</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma">
<span class="kd">func</span> <span class="nf">loadWithSingleflight</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">data</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">loadFromCache</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">ErrCacheMiss</span> <span class="p">{</span>
        <span class="nx">v</span><span class="p">,</span> <span class="nx">err</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">g</span><span class="p">.</span><span class="nf">Do</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="kd">func</span><span class="p">()</span> <span class="p">(</span><span class="kd">interface</span><span class="p">{},</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">data</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">loadFromDB</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span>
            <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
            <span class="p">}</span>
            <span class="nf">setCache</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span>
            <span class="k">return</span> <span class="nx">data</span><span class="p">,</span> <span class="kc">nil</span>
        <span class="p">})</span>
        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
            <span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
            <span class="k">return</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">err</span>
        <span class="p">}</span>
        <span class="nx">data</span> <span class="p">=</span> <span class="nx">v</span><span class="p">.(</span><span class="kt">string</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">data</span><span class="p">,</span> <span class="kc">nil</span>
<span class="p">}</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>simulate cache miss</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma">
<span class="kd">func</span> <span class="nf">loadFromCache</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">ErrCacheMiss</span>
<span class="p">}</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>setCache</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma">
<span class="kd">func</span> <span class="nf">setCache</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">data</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{}</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>getDataFromDB</p>

          </td>
          <td class="code">
            
          <pre class="chroma">
<span class="kd">func</span> <span class="nf">loadFromDB</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;query db&#34;</span><span class="p">)</span>
    <span class="nx">unix</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">Itoa</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">().</span><span class="nf">UnixNano</span><span class="p">()))</span>
    <span class="k">return</span> <span class="nx">unix</span><span class="p">,</span> <span class="kc">nil</span>
<span class="p">}</span>
</pre>
          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>default query: every query goes to db</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma"><span class="gp">$</span>go run sync-singleflight.go</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma"><span class="go">===default query===
</span><span class="go">query db
</span><span class="go">query db
</span><span class="go">query db
</span><span class="go">query db
</span><span class="go">query db
</span><span class="go">query db
</span><span class="go">query db
</span><span class="go">query db
</span><span class="go">query db
</span><span class="go">query db
</span><span class="go">2023/01/24 12:24:19 
</span><span class="go">2023/01/24 12:24:19 
</span><span class="go">2023/01/24 12:24:19 
</span><span class="go">2023/01/24 12:24:19 
</span><span class="go">2023/01/24 12:24:19 
</span><span class="go">2023/01/24 12:24:19 
</span><span class="go">2023/01/24 12:24:19 
</span><span class="go">2023/01/24 12:24:19 
</span><span class="go">2023/01/24 12:24:19 
</span><span class="go">2023/01/24 12:24:19 </span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>only one query goes to db.
others goroutine will use that result.</p>

          </td>
          <td class="code">
            
          <pre class="chroma">
<span class="go">===wrap query with singleflight===
</span><span class="go">query db
</span><span class="go">2023/01/24 12:24:19 1674534259333265000
</span><span class="go">2023/01/24 12:24:19 1674534259333265000
</span><span class="go">2023/01/24 12:24:19 1674534259333265000
</span><span class="go">2023/01/24 12:24:19 1674534259333265000
</span><span class="go">2023/01/24 12:24:19 1674534259333265000
</span><span class="go">2023/01/24 12:24:19 1674534259333265000
</span><span class="go">2023/01/24 12:24:19 1674534259333265000
</span><span class="go">2023/01/24 12:24:19 1674534259333265000
</span><span class="go">2023/01/24 12:24:19 1674534259333265000
</span><span class="go">2023/01/24 12:24:19 1674534259333265000</span></pre>
          </td>
        </tr>
        
      </table>
      
      
      <p class="next">
        Next example: <a href="pattern-singleton.html">Pattern: Singleton</a>.
      </p>
      

    <p class="footer">
      <a href="https://github.com/hhow09/gobyexample">source</a>
      <br/>
      Forked from <a href="https://gobyexample.com">Go by Example</a>
    </p>

    </div>
    <script>
      var codeLines = [];
      codeLines.push('');codeLines.push('package main\u000A');codeLines.push('import (\u000A    \"errors\"\u000A    \"fmt\"\u000A    \"log\"\u000A    \"strconv\"\u000A    \"sync\"\u000A    \"time\"\u000A');codeLines.push('    \"golang.org/x/sync/singleflight\"\u000A)\u000A');codeLines.push('var (\u000A    g            singleflight.Group\u000A    ErrCacheMiss \u003D errors.New(\"cache miss\")\u000A)\u000A');codeLines.push('func main() {\u000A    var wg sync.WaitGroup\u000A    fmt.Println(\"\u003D\u003D\u003Ddefault query\u003D\u003D\u003D\")\u000A    wg.Add(10)\u000A');codeLines.push('    for i :\u003D 0; i \u003C 10; i++ {\u000A        go func() {\u000A            defer wg.Done()\u000A            data, err :\u003D loadDefault(\"key\")\u000A            if err !\u003D nil {\u000A                log.Print(err)\u000A                return\u000A            }\u000A            log.Println(data)\u000A        }()\u000A    }\u000A    wg.Wait()\u000A');codeLines.push('    fmt.Println(\"\")\u000A    fmt.Println(\"\u003D\u003D\u003Dwrap query with singleflight\u003D\u003D\u003D\")\u000A    wg.Add(10)\u000A');codeLines.push('    for i :\u003D 0; i \u003C 10; i++ {\u000A        go func() {\u000A            defer wg.Done()\u000A            data, err :\u003D loadWithSingleflight(\"key\")\u000A            if err !\u003D nil {\u000A                log.Print(err)\u000A                return\u000A            }\u000A            log.Println(data)\u000A        }()\u000A    }\u000A    wg.Wait()\u000A}\u000A');codeLines.push('func loadDefault(key string) (string, error) {\u000A    data, err :\u003D loadFromCache(key)\u000A    if err !\u003D nil \u0026\u0026 err \u003D\u003D ErrCacheMiss {\u000A        data, err :\u003D loadFromDB(key)\u000A        if err !\u003D nil {\u000A            log.Println(err)\u000A            return \"\", err\u000A        }\u000A        setCache(key, data)\u000A    }\u000A    return data, nil\u000A}\u000A');codeLines.push('func loadWithSingleflight(key string) (string, error) {\u000A    data, err :\u003D loadFromCache(key)\u000A    if err !\u003D nil \u0026\u0026 err \u003D\u003D ErrCacheMiss {\u000A        v, err, _ :\u003D g.Do(key, func() (interface{}, error) {\u000A            data, err :\u003D loadFromDB(key)\u000A            if err !\u003D nil {\u000A                return nil, err\u000A            }\u000A            setCache(key, data)\u000A            return data, nil\u000A        })\u000A        if err !\u003D nil {\u000A            log.Println(err)\u000A            return \"\", err\u000A        }\u000A        data \u003D v.(string)\u000A    }\u000A    return data, nil\u000A}\u000A');codeLines.push('func loadFromCache(key string) (string, error) {\u000A    return \"\", ErrCacheMiss\u000A}\u000A');codeLines.push('func setCache(key, data string) {}\u000A');codeLines.push('func loadFromDB(key string) (string, error) {\u000A    fmt.Println(\"query db\")\u000A    unix :\u003D strconv.Itoa(int(time.Now().UnixNano()))\u000A    return unix, nil\u000A}\u000A');codeLines.push('');codeLines.push('');codeLines.push('');
    </script>
    <script src="site.js" async></script>
  </body>
</html>
