<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Go by Example: Performance: Slice-Append</title>
    <link rel=stylesheet href="site.css">
  </head>
  <script>
      onkeydown = (e) => {
          
          if (e.key == "ArrowLeft") {
              window.location.href = 'slices.html';
          }
          
          
          if (e.key == "ArrowRight") {
              window.location.href = 'select.html';
          }
          
      }
  </script>
  <body>
    <div class="example" id="performance-slice-append">
      <h2><a href="./">Go by Example</a>: Performance: Slice-Append</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>Compare and benchmark 3 kinds of slice append <br/>
ref: <a href="https://go.dev/blog/slices">Arrays, slices (and strings): The mechanics of &lsquo;append&rsquo;</a>
ref: <a href="https://stackoverflow.com/questions/38654729/golang-slice-append-vs-assign-performance">Golang slice append vs assign performance</a></p>

          </td>
          <td class="code empty leading">
            
          
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            <a href="https://go.dev/play/p/8H7HBKg0Tqk"><img title="Run code" src="play.png" class="run" /></a><img title="Copy code" src="clipboard.png" class="copy" />
          <pre class="chroma"><span class="kn">package</span> <span class="nx">main</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma"><span class="kd">const</span> <span class="nx">length</span> <span class="p">=</span> <span class="mi">1000</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>1) <code>genByAppend</code> will encountered several times of re-allocation as the slice grows. Process includes:<br/>
  - re-allocate a new array with doubled size <br/>
  - copy the existing array data to new one <br/>
  - change the slice pointer to array <br/>
  - append <br/></p>

          </td>
          <td class="code leading">
            
          <pre class="chroma">
<span class="kd">func</span> <span class="nf">genByAppend</span><span class="p">()</span> <span class="p">[]</span><span class="kt">int</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">s</span> <span class="p">[]</span><span class="kt">int</span>
    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="nx">s</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">s</span>
<span class="p">}</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>2) <code>genByAppendCap</code> pre-allocated the capacity of <code>length</code> <br/>
  - already allocated enough space. <br/>
  - should not trigger the re-allocation <br/>
  - however the local variable s (which is a slice header) has to be updated in each cycle of the loop.</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma">
<span class="kd">func</span> <span class="nf">genByAppendCap</span><span class="p">()</span> <span class="p">[]</span><span class="kt">int</span> <span class="p">{</span>
    <span class="nx">s</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">length</span><span class="p">)</span>
    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="nx">s</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
    <span class="p">}</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma">    <span class="k">return</span> <span class="nx">s</span>
<span class="p">}</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>3) <code>genByAssign</code> is the fastest among 3, because of directly assignment.</p>

          </td>
          <td class="code">
            
          <pre class="chroma">
<span class="kd">func</span> <span class="nf">genByAssign</span><span class="p">()</span> <span class="p">[]</span><span class="kt">int</span> <span class="p">{</span>
    <span class="nx">s</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">length</span><span class="p">)</span>
    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nx">i</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">s</span>
<span class="p">}</span>
</pre>
          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma"><span class="gp">$</span> go test -v -bench=. </pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code">
            
          <pre class="chroma"><span class="go">goos: darwin
</span><span class="go">goarch: arm64
</span><span class="go">pkg: github.com/hhow09/gobyexample/examples/performance-slice-append
</span><span class="go">BenchmarkGenByAppend
</span><span class="go">BenchmarkGenByAppend-8            563953              2148 ns/op
</span><span class="go">BenchmarkGenByAppendCap
</span><span class="go">BenchmarkGenByAppendCap-8        2595301               455.5 ns/op
</span><span class="go">BenchmarkGenByAssign
</span><span class="go">BenchmarkGenByAssign-8           4048084               294.9 ns/op
</span><span class="go">PASS
</span><span class="go">ok      github.com/hhow09/gobyexample/examples/performance-slice-append 5.483s</span></pre>
          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>performance-slice-append_test.go</p>

          </td>
          <td class="code leading">
            <a href="https://go.dev/play/p/8H7HBKg0Tqk"><img title="Run code" src="play.png" class="run" /></a><img title="Copy code" src="clipboard.png" class="copy" />
          <pre class="chroma">
<span class="kn">package</span> <span class="nx">main</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma"><span class="kn">import</span> <span class="s">&#34;testing&#34;</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma"><span class="kd">func</span> <span class="nf">BenchmarkGenByAppend</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="nf">genByAppend</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma"><span class="kd">func</span> <span class="nf">BenchmarkGenByAppendCap</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="nf">genByAppendCap</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code">
            
          <pre class="chroma"><span class="kd">func</span> <span class="nf">BenchmarkGenByAssign</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="nf">genByAssign</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre>
          </td>
        </tr>
        
      </table>
      
      
      <p class="next">
        Next example: <a href="select.html">Select</a>.
      </p>
      

    <p class="footer">
      <a href="https://github.com/hhow09/gobyexample">source</a>
      <br/>
      Forked from <a href="https://gobyexample.com">Go by Example</a>
    </p>

    </div>
    <script>
      var codeLines = [];
      codeLines.push('');codeLines.push('package main\u000A');codeLines.push('const length \u003D 1000\u000A');codeLines.push('func genByAppend() []int {\u000A    var s []int\u000A    for i :\u003D 0; i \u003C length; i++ {\u000A        s \u003D append(s, i)\u000A    }\u000A    return s\u000A}\u000A');codeLines.push('func genByAppendCap() []int {\u000A    s :\u003D make([]int, 0, length)\u000A    for i :\u003D 0; i \u003C length; i++ {\u000A        s \u003D append(s, i)\u000A    }\u000A');codeLines.push('    return s\u000A}\u000A');codeLines.push('func genByAssign() []int {\u000A    s :\u003D make([]int, length)\u000A    for i :\u003D 0; i \u003C length; i++ {\u000A        s[i] \u003D i\u000A    }\u000A    return s\u000A}\u000A');codeLines.push('');codeLines.push('');codeLines.push('package main\u000A');codeLines.push('import \"testing\"\u000A');codeLines.push('func BenchmarkGenByAppend(b *testing.B) {\u000A    for i :\u003D 0; i \u003C b.N; i++ {\u000A        genByAppend()\u000A    }\u000A}\u000A');codeLines.push('func BenchmarkGenByAppendCap(b *testing.B) {\u000A    for i :\u003D 0; i \u003C b.N; i++ {\u000A        genByAppendCap()\u000A    }\u000A}\u000A');codeLines.push('func BenchmarkGenByAssign(b *testing.B) {\u000A    for i :\u003D 0; i \u003C b.N; i++ {\u000A        genByAssign()\u000A    }\u000A}\u000A');
    </script>
    <script src="site.js" async></script>
  </body>
</html>
